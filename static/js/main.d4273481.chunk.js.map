{"version":3,"sources":["components/card/index.jsx","components/board/index.jsx","deck.js","index.js","App.jsx"],"names":["Card","handleClick","id","type","flipped","solved","height","width","disabled","className","style","onClick","src","alt","Board","dimension","cards","map","card","key","includes","initializeDeck","array","_array","slice","i","length","randomIndex","Math","floor","random","temp","shuffle","reduce","acc","push","ReactDOM","render","useState","setCards","setFlipped","setDimension","setSolved","setDisabled","score","setScore","wins","setWins","losses","setLosses","guesses","setGuesses","useEffect","resizeBoard","preloadImages","resizeListener","window","addEventListener","removeEventListener","validateScore","doesntMatch","cb","newGuess","updateGuess","validateGuess","setTimeout","resetCards","newGame","wrongGuess","Image","sameCardClicked","isMatch","clickedCard","find","min","document","documentElement","clientWidth","clientHeight","newScore","updateScore","getElementById"],"mappings":"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","file":"static/js/main.d4273481.chunk.js","sourcesContent":["import React from 'react';\r\n//import ReactCardFlip from \"react-card-flip\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './styles.css'\r\n\r\nexport default function Card({ \r\n  handleClick, \r\n  id, \r\n  type, \r\n  flipped,\r\n  solved, \r\n  height, \r\n  width,\r\n  disabled,\r\n}) {\r\n  return <div\r\n      className={`flip-container ${flipped ? 'flipped' : ''}`}\r\n      style={{\r\n          width, height\r\n      }}\r\n      onClick={()=> disabled ? null : handleClick(id)}\r\n      >\r\n      <div className=\"flipper\">\r\n          <img\r\n              style={{\r\n                  height, width\r\n              }}\r\n              className={flipped ? 'front' : 'back'}\r\n              src={flipped || solved ? `img/${type}.png` : 'img/back.png' }\r\n              alt={type}\r\n          />\r\n      </div>\r\n  </div>\r\n}\r\n\r\n\r\nCard.propTypes = {\r\n  handleClick: PropTypes.func.isRequired,\r\n  id: PropTypes.number.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  flipped: PropTypes.bool.isRequired,\r\n  solved: PropTypes.bool.isRequired,\r\n  back: PropTypes.string.isRequired,\r\n  front: PropTypes.string.isRequired,\r\n  height: PropTypes.number.isRequired,\r\n  width: PropTypes.number.isRequired,\r\n  disabled: PropTypes.bool.isRequired,\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Card from '../card';\r\n\r\nimport './styles.css'\r\n\r\nexport default function Board({\r\n     disabled, \r\n     dimension, \r\n     cards, \r\n     flipped,\r\n     solved, \r\n     handleClick }) {\r\n    return (\r\n    <div className=\"board\">\r\n        {cards.map((card)=>(\r\n            <Card\r\n            key={card.id}\r\n            id={card.id}\r\n            type={card.type}\r\n            width={dimension / 3.75}\r\n            height={dimension / 3.75}\r\n            flipped={flipped.includes(card.id)}\r\n            solved={solved.includes(card.id)}\r\n            handleClick={handleClick}\r\n            disabled={disabled || solved.includes(card.includes)}\r\n            />\r\n            ))}\r\n    </div>\r\n    )\r\n}\r\n\r\nBoard.propTypes = {\r\n    disabled: PropTypes.bool.isRequired,\r\n    dimension: PropTypes.number.isRequired,\r\n    cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\r\n    flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n    solved: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n    handleClick: PropTypes.func.isRequired,\r\n}","function shuffle(array){\r\n    const _array = array.slice(0);\r\n    for (let i = 0; i <_array.length - 1; i++){\r\n        let randomIndex = Math.floor(Math.random() * (i + 1))\r\n        let temp = _array[i]\r\n        _array[i] = _array[randomIndex];\r\n        _array[randomIndex] = temp;\r\n        //using the above to randomize and swap the values in the arrary\r\n    }\r\n    return _array;\r\n}\r\n\r\nexport default function initializeDeck(){\r\n    let id = 0;\r\n    const cards = ['yarn 500', 'yarn acronym', 'yarn doit', 'yarn fun', 'yarn iwillcroch', 'yarn knotty', 'yarn magic', 'yarn mug', 'yarn nowork', 'yarn punch'].reduce((acc, type) => {\r\n    acc.push({\r\n      id: id++,\r\n      type  \r\n    })\r\n    acc.push({\r\n        id: id++,\r\n        type  \r\n      })\r\n    return acc\r\n}, [])\r\nreturn shuffle(cards)\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n","import React, { useState, useEffect } from  'react';\r\n//import ReactCardFlip from 'react-card-flip'\r\nimport Board from './components/board';\r\n\r\nimport initializeDeck from './deck'\r\n\r\nexport default function App(){\r\n    const [cards, setCards] = useState([])\r\n    const [flipped, setFlipped] = useState([]);\r\n    const [dimension, setDimension] = useState(400);\r\n    const [solved, setSolved] = useState([]);\r\n    const [disabled, setDisabled] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n    const [wins, setWins] = useState(0);\r\n    const [losses, setLosses] = useState(0);\r\n    const [guesses, setGuesses] = useState(0);//wrong guess\r\n    //add variables for score, wins, losses and guesses\r\n\r\n    useEffect(() => {\r\n        resizeBoard()\r\n        setCards(initializeDeck())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        preloadImages()\r\n      }, cards);\r\n\r\n    useEffect(() => {\r\n        const resizeListener = window.addEventListener('resize', resizeBoard)\r\n        //component will unmount\r\n        return () => window.removeEventListener('resize', resizeListener)\r\n        })\r\n    //use effect for score\r\n    //validateScore is to validate that the score has reached a specific number for reset?\r\n    useEffect(() => {\r\n        validateScore();//checkscore\r\n    }, [score]);\r\n\r\n    const handleClick = (id) => {\r\n        setDisabled(true);\r\n        if (flipped.length === 0){//if no cards are flipped, set flip to card id and disabled to\r\n            setFlipped([id])\r\n            setDisabled(false)\r\n        }else{\r\n            if(sameCardClicked(id))return\r\n            setFlipped([flipped[0], id])\r\n            if (isMatch(id)){\r\n                setSolved([...solved, flipped[0], id])\r\n                resetCards()\r\n                updateScore(score, validateScore);\r\n            }else{\r\n                doesntMatch();\r\n            }\r\n        }\r\n        //setFlipped([...flipped, id]);\r\n    }\r\n\r\n    const doesntMatch = () => {\r\n        updateGuess(guesses, validateGuess);\r\n        setTimeout(resetCards, 2000);\r\n    }  \r\n    \r\n    function updateScore(score, cb){\r\n        var newScore = score + 1;\r\n        setScore(score + 1);\r\n        cb(newScore)\r\n    }\r\n\r\n    function updateGuess(guesses, cb){\r\n        var newGuess = guesses + 1;\r\n        setGuesses(guesses + 1);\r\n        cb(newGuess);\r\n    }\r\n\r\n    const validateScore = (score) => {\r\n        if(score > 5){\r\n            setWins(wins + 1);\r\n            setTimeout(newGame, 2000);\r\n        }\r\n    }\r\n\r\n    const validateGuess = (wrongGuess) => {\r\n        if(wrongGuess > 7){\r\n            setLosses(losses + 1);\r\n            setTimeout(newGame, 2000);\r\n        }\r\n    }\r\n\r\n    const newGame = () => {\r\n        setSolved([]);\r\n        setCards(initializeDeck());\r\n        setGuesses(0);\r\n        setScore(0);\r\n      }\r\n    \r\n      const preloadImages = () => \r\n      cards.map((card) => {\r\n        const src = `img/${card.type}.png`;\r\n        new Image().src = src;\r\n      })\r\n  \r\n      const resetCards = () => {\r\n        setFlipped([])\r\n        setDisabled(false)\r\n    }\r\n\r\n    const sameCardClicked = (id) => flipped.includes(id)\r\n\r\n    const isMatch = (id) => {\r\n        const clickedCard = cards.find((card) => card.id === id)\r\n        const flippedCard = cards.find((card) => flipped[0] === card.id)\r\n        return flippedCard.type === clickedCard.type\r\n    }\r\n      \r\n    const resizeBoard = () => {\r\n        setDimension(Math.min(\r\n            document.documentElement.clientWidth,\r\n            document.documentElement.clientHeight,\r\n        ),\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <h1 className=\"title\">Yarn Clicky</h1>\r\n            <hr/>\r\n            <h3 className=\"question\">\r\n                Can you make the yarn sayings match?\r\n            </h3>\r\n            <p className=\"score\">guesses = {guesses}  wins = {wins}  losses = {losses}</p>\r\n            <p className=\"score\">score = {score}</p>\r\n            <Board\r\n            dimension={dimension}\r\n            cards={cards}\r\n            flipped={flipped}\r\n            handleClick={handleClick}\r\n            disabled={disabled}\r\n            solved={solved}\r\n            />\r\n                        \r\n        </div>\r\n    )\r\n};"],"sourceRoot":""}